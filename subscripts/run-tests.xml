<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2011 Keita Kita

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project>
    <property name="test.result.xml.output"
            location="${reports.directory}/test_result.xml" />
    <property name="coverage.log.output"
            location="${reports.directory}/log_coverage.txt" />
    <property name="coverage.output.directory"
            location="${reports.directory}" />
    <property name="coverage.xml.output"
            location="${reports.directory}/coverage.xml" />
    <property name="coverage.html.output"
            location="${reports.directory}/coverage.html" />

    <property name="jython.class" value="org.python.util.jython" />
    <property name="jython.jar" location="${sdk.dir}/tools/lib/jython.jar" />
    <property name="ddmlib.jar"
            value="${sdk.dir}/tools/lib/ddmlib.jar" />

    <property name="run.tests.for.xml.script"
            location="${subscripts.directory}/run_tests_for_xml.py" />

    <property name="verify.test.xml.result.script"
            location="${subscripts.directory}/verify_test_xml_result.py" />

    <target name="-make-test-result-directory">
        <mkdir dir="${reports.directory}"/>
    </target>

    <target name="-get-manifest-package">
        <get-manifest-package destination="manifest.package" />
    </target>

    <target name="-get-tested-manifest-package">
        <local name="tested.project.manifest.file" />
        <property name="tested.project.manifest.file"
                location="${tested.project.dir}/AndroidManifest.xml" />

        <get-manifest-package manifest.file="${tested.project.manifest.file}"
                destination="tested.manifest.package" />
    </target>

    <macrodef name="run-tests-for-xml"
            description="Run script that tests for XML.">
        <element name="args" description="Arguments of the script." />
        <sequential>
            <java classname="${jython.class}" failonerror="true">
                <classpath>
                    <pathelement path="${jython.jar}" />
                    <pathelement path="${ddmlib.jar}" />
                </classpath>
                <arg path="${run.tests.for.xml.script}" />
                <args />
            </java>
        </sequential>
    </macrodef>

    <target name="-test-xml"
            depends="-get-manifest-package">
        <echo message="Test ${test.runner} on ${manifest.package}." />
        <run-tests-for-xml>
            <args>
                <arg value="-a" />
                <arg path="${adb}" />
                <arg value="-b" />
                <arg value="${adb.device.arg}" />
                <arg value="-o" />
                <arg value="${test.result.xml.output}" />
                <arg value="${manifest.package}" />
                <arg value="${test.runner}" />
            </args>
        </run-tests-for-xml>
        <echo message="XML of test result is outputted to ${test.result.xml.output}" />
    </target>

    <target name="-test-coverage-xml" depends="-get-manifest-package, -get-tested-manifest-package">
        <echo message="Run tests and measure coverage about ${test.runner} on ${manifest.package}." />
        <run-tests-for-xml>
            <args>
                <arg value="-a" />
                <arg path="${adb}" />
                <arg value="-b" />
                <arg value="${adb.device.arg}" />
                <arg value="-o" />
                <arg value="${test.result.xml.output}" />
                <arg value="--coverage" />
                <arg value="${manifest.package}" />
                <arg value="${test.runner}" />
            </args>
        </run-tests-for-xml>
        <exec executable="${adb}" failonerror="true"
                taskname="get coverage.ec from device">
            <arg line="${adb.device.arg}" />
            <arg value="pull" />
            <arg value="/data/data/${tested.manifest.package}/files/coverage.ec" />
            <arg value="${basedir}/coverage.ec" />
        </exec>
        <emma>
            <report sourcepath="${tested.project.absolute.dir}/${source.dir}"
                    verbosity="${verbosity}">
                <infileset dir="${basedir}">
                    <include name="coverage.ec" />
                    <include name="coverage.em" />
                </infileset>
                <xml outfile="${coverage.xml.output}" />
                <html outfile="${coverage.html.output}" encoding="UTF-8" />
            </report>
        </emma>
        <delete file="coverage.ec" />
        <delete file="coverage.em" />
        <echo message="XML of test result is saved to ${test.result.xml.output}" />
        <echo message="HTML and XML of coverage report are saved to ${coverage.html.output} and ${coverage.xml.output}" />
    </target>

    <target name="test-xml"
            depends="-test-project-check, -make-test-result-directory"
            description="Run tests and generate JUnit XML report.">
        <if condition="${emma.enabled}">
            <then>
                <antcall target="-test-coverage-xml" />
            </then>
            <else>
                <antcall target="-test-xml" />
            </else>
        </if>
    </target>

    <macrodef name="verify-test-xml-result"
            description="Run script that verifies XML of test result.">
        <attribute name="test.result.xml"
            description="Path of XML of test reuslt." />
        <sequential>
            <java classname="${jython.class}" failonerror="true">
                <classpath>
                    <pathelement path="${jython.jar}" />
                </classpath>
                <arg path="${verify.test.xml.result.script}" />
                <arg path="@{test.result.xml}" />
            </java>
        </sequential>
    </macrodef>

    <target name="verify-test-result"
            depends="-test-project-check"
            description="Check the JUnit XML report. And fail this build if the test is failure.">
        <fail message="JUnit XML file (${test.result.xml.output}) is not found."
                taskname="check XML report is available">
            <condition>
                <not>
                    <available file="${test.result.xml.output}" />
                </not>
            </condition>
        </fail>

        <verify-test-xml-result test.result.xml="${test.result.xml.output}" />
    </target>
</project>