<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2005-2008 The Android Open Source Project
    Copyright 2012 Keita Kita

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!-- This file must be imported the *above* "${sdk.dir}/tools/ant/build.xml". -->

<!-- Custom targets from ${sdk.dir}/tools/ant/build.xml. -->
<project>
    <macrodef name="create-r-class-exclusion-filter"
            description="Create EMMA exclusion filter for generated R class.">
        <attribute name="destination" description="Property of destination" />
        <sequential>
            <local name="manifest.package" />

            <get-manifest-package destination="manifest.package" />
            <property name="@{destination}"
                    value="${manifest.package}.R,${manifest.package}.R$$*" />
        </sequential>
    </macrodef>


    <!-- Below target from sdk/files/build.xml at
         d078e34d743bc457a8172ca759458162e6b745da on aosp/tools_r16 -->

    <!-- Compiles this project's .java files into .class files. -->
    <target name="-compile" depends="-build-setup, -pre-build, -code-gen, -pre-compile">
        <!-- Modify to log. -->
        <echo message="Using customized -compile target." />

        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
            <!-- If android rules are used for a test project, its classpath should include
                 tested project's location -->
            <condition property="extensible.classpath"
                    value="${tested.project.absolute.dir}/bin/classes"
                    else=".">
                <isset property="tested.project.absolute.dir" />
            </condition>
            <condition property="extensible.libs.classpath"
                    value="${tested.project.absolute.dir}/${jar.libs.dir}"
                    else="${jar.libs.dir}">
                <isset property="tested.project.absolute.dir" />
            </condition>
            <javac encoding="${java.encoding}"
                    source="${java.source}" target="${java.target}"
                    debug="true" extdirs="" includeantruntime="false"
                    destdir="${out.classes.absolute.dir}"
                    bootclasspathref="android.target.classpath"
                    verbose="${verbose}"
                    classpath="${extensible.classpath}"
                    classpathref="jar.libs.ref">
                <src path="${source.absolute.dir}" />
                <src path="${gen.absolute.dir}" />
                <classpath>
                    <fileset dir="${extensible.libs.classpath}" includes="*.jar" />
                </classpath>
                <compilerarg line="${java.compilerargs}" />
            </javac>
            <!-- if the project is a library then we generate a jar file -->
            <if condition="${project.is.library}">
                <then>
                    <echo>Creating library output jar file...</echo>
                    <property name="out.library.jar.file" location="${out.absolute.dir}/classes.jar" />
                    <if>
                        <condition>
                            <length string="${android.package.excludes}" trim="true" when="greater" length="0" />
                        </condition>
                        <then>
                            <echo>Custom jar packaging exclusion: ${android.package.excludes}</echo>
                        </then>
                    </if>
                    <jar destfile="${out.library.jar.file}">
                        <fileset dir="${out.classes.absolute.dir}" excludes="**/R.class **/R$*.class"/>
                        <fileset dir="${source.absolute.dir}" excludes="**/*.java ${android.package.excludes}" />
                    </jar>
                </then>
            </if>

            <!-- if the project is instrumented, intrument the classes -->
            <if condition="${build.is.instrumented}">
                <then>
                    <echo>Instrumenting classes from ${out.absolute.dir}/classes...</echo>
                    <!-- Modify for instrumentation filtering. -->
                    <local name="r-class-exclusion-filter" />
                    <create-r-class-exclusion-filter
                            destination="r-class-exclusion-filter" />
                    <echo message="${r-class-exclusion-filter} are excluded from instrumenting." />
                    <echo message="Additional coverage filter is ${coverage.filters.file}" />

                    <!-- It only instruments class files, not any external libs -->
                    <emma enabled="true">
                        <instr verbosity="${verbosity}"
                               mode="overwrite"
                               instrpath="${out.absolute.dir}/classes"
                               outdir="${out.absolute.dir}/classes">
                            <!-- Modify for instrumentation filtering. -->
                            <filter excludes="${r-class-exclusion-filter}" />
                            <filter file="${coverage.filters.file}" />
                        </instr>
                    </emma>
                </then>
            </if>
        </do-only-if-manifest-hasCode>
    </target>
</project>